{"version":3,"sources":["E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/components/togglebutton/togglebutton.ts","E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/showcase/components/togglebutton/togglebuttondemo-routing.module.ts","E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/showcase/components/togglebutton/togglebuttondemo.html","E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/showcase/components/togglebutton/togglebuttondemo.module.ts","E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/showcase/components/togglebutton/togglebuttondemo.ts"],"names":[],"mappings":"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","file":"togglebuttondemo.module.chunk.js","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,AfterViewInit,ViewChild,ElementRef} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\r\n\r\nexport const TOGGLEBUTTON_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ToggleButton),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'p-toggleButton',\r\n    template: `\r\n        <div [ngClass]=\"{'ui-button ui-togglebutton ui-widget ui-state-default ui-corner-all': true, 'ui-button-text-only': (!onIcon&&!offIcon), \r\n                'ui-button-text-icon-left': (onIcon&&offIcon&&hasOnLabel&&hasOffLabel), 'ui-button-icon-only': (onIcon&&offIcon&&!hasOnLabel&&!hasOffLabel),\r\n                'ui-state-active': checked,'ui-state-focus':focus,'ui-state-disabled':disabled}\" [ngStyle]=\"style\" [class]=\"styleClass\" \r\n                (click)=\"toggle($event)\">\r\n            <div class=\"ui-helper-hidden-accessible\">\r\n                <input #checkbox type=\"checkbox\" [attr.id]=\"inputId\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [attr.tabindex]=\"tabindex\">\r\n            </div>\r\n            <span *ngIf=\"onIcon||offIcon\" [class]=\"getIconClass()\"></span>\r\n            <span class=\"ui-button-text ui-unselectable-text\">{{checked ? hasOnLabel ? onLabel : 'ui-btn' : hasOffLabel ? offLabel : 'ui-btn'}}</span>\r\n        </div>\r\n    `,\r\n    providers: [TOGGLEBUTTON_VALUE_ACCESSOR]\r\n})\r\nexport class ToggleButton implements ControlValueAccessor,AfterViewInit {\r\n\r\n    @Input() onLabel: string = 'Yes';\r\n\r\n    @Input() offLabel: string = 'No';\r\n\r\n    @Input() onIcon: string;\r\n\r\n    @Input() offIcon: string;\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() inputId: string;\r\n\r\n    @Input() tabindex: number;\r\n\r\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @ViewChild('checkbox') checkboxViewChild: ElementRef;\r\n    \r\n    checkbox: HTMLInputElement;\r\n    \r\n    checked: boolean = false;\r\n\r\n    focus: boolean = false;\r\n    \r\n    onModelChange: Function = () => {};\r\n    \r\n    onModelTouched: Function = () => {};\r\n    \r\n    ngAfterViewInit() {\r\n        this.checkbox = <HTMLInputElement> this.checkboxViewChild.nativeElement;\r\n    }\r\n\r\n    getIconClass() {\r\n        let baseClass = 'ui-button-icon-left fa fa-fw';\r\n        return baseClass + ' ' + (this.checked ? this.onIcon : this.offIcon);\r\n    }\r\n    \r\n    toggle(event: Event) {\r\n        if(!this.disabled) {\r\n            this.checked = !this.checked;\r\n            this.onModelChange(this.checked);\r\n            this.onModelTouched();\r\n            this.onChange.emit({\r\n                originalEvent: event,\r\n                checked: this.checked\r\n            });\r\n            this.checkbox.focus();\r\n        }\r\n    }\r\n\r\n    onFocus() {\r\n        this.focus = true;\r\n    }\r\n    \r\n    onBlur() {\r\n        this.focus = false;\r\n        this.onModelTouched();\r\n    }\r\n    \r\n    writeValue(value: any) : void {\r\n        this.checked = value;\r\n    }\r\n    \r\n    registerOnChange(fn: Function): void {\r\n        this.onModelChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n    \r\n    setDisabledState(val: boolean): void {\r\n        this.disabled = val;\r\n    }\r\n    \r\n    get hasOnLabel():boolean {\r\n        return this.onLabel && this.onLabel.length > 0;\r\n    }\r\n    \r\n    get hasOffLabel():boolean {\r\n        return this.onLabel && this.onLabel.length > 0;\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [ToggleButton],\r\n    declarations: [ToggleButton]\r\n})\r\nexport class ToggleButtonModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/components/togglebutton/togglebutton.ts","import {NgModule}     from '@angular/core';\r\nimport {RouterModule} from '@angular/router'\r\nimport {ToggleButtonDemo} from './togglebuttondemo';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tRouterModule.forChild([\r\n\t\t\t{path:'',component: ToggleButtonDemo}\r\n\t\t])\r\n\t],\r\n\texports: [\r\n\t\tRouterModule\r\n\t]\r\n})\r\nexport class ToggleButtonDemoRoutingModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/showcase/components/togglebutton/togglebuttondemo-routing.module.ts","module.exports = \"<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Togglebutton</span>\\r\\n        <span>ToggleButton is used to select a boolean value using a button.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <h3 class=\\\"first\\\">Basic - ({{checked1}})</h3>\\r\\n    <p-toggleButton [(ngModel)]=\\\"checked1\\\" [style]=\\\"{'width':'150px'}\\\"></p-toggleButton>\\r\\n\\r\\n    <h3>Customized - ({{checked2}})</h3>\\r\\n    <p-toggleButton [(ngModel)]=\\\"checked2\\\" onLabel=\\\"I confirm\\\" offLabel=\\\"I reject\\\" onIcon=\\\"fa-check-square\\\" offIcon=\\\"fa-square\\\" [style]=\\\"{'width':'150px'}\\\"></p-toggleButton>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"Documentation\\\">\\r\\n            <h3>Import</h3>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nimport &#123;ToggleButtonModule&#125; from 'primeng/primeng';\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Getting Started</h3>\\r\\n            <p>Two-way binding to a boolean property is defined using the standard ngModel directive.</p>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-toggleButton [(ngModel)]=\\\"checked\\\"&gt;&lt;/p-toggleButton&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class ModelComponent &#123;\\r\\n\\r\\n    checked: boolean;\\r\\n\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>As model is two-way binding enabled, setting the bound value as true displays the state as checked.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class ModelComponent &#123;\\r\\n\\r\\n   checked: boolean = true;\\r\\n\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Model Driven Forms</h3>\\r\\n            <p>ToggleButton can be used in a model driven form as well.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-toggleButton formControlName=\\\"agreed\\\"&gt;&lt;/p-toggleButton&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Customization</h3>\\r\\n            <p>Icons and Labels can be customized using onLabel, offLabel, onIcon and offIcon attributes.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-toggleButton onLabel=\\\"I confirm\\\" offLabel=\\\"I reject\\\"\\r\\n        onIcon=\\\"fa-check-square\\\" offIcon=\\\"fa-square\\\" [(ngModel)]=\\\"val\\\"&gt;&lt;/p-toggleButton&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Properties</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Type</th>\\r\\n                            <th>Default</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                         <tr>\\r\\n                            <td>onLabel</td>\\r\\n                            <td>string</td>\\r\\n                            <td>Yes</td>\\r\\n                            <td>Label for the on state.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>offLabel</td>\\r\\n                            <td>string</td>\\r\\n                            <td>No</td>\\r\\n                            <td>Label for the off state.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onIcon</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Icon for the on state.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>offIcon</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Icon for the off state.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>style</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Inline style of the element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>styleClass</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Style class of the element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>disabled</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When present, it specifies that the element should be disabled.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                          <td>tabindex</td>\\r\\n                          <td>number</td>\\r\\n                          <td>null</td>\\r\\n                          <td>Index of the element in tabbing order.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>inputId</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Identifier of the focus input to match a label defined for the component.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Events</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Parameters</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>onChange</td>\\r\\n                            <td>event.originalEvent: browser event <br>\\r\\n                                evebt.checked: boolean value to represent checked state.</td>\\r\\n                            <td>Callback to invoke on state change.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-toggleButton (onChange)=\\\"handleChange($event)\\\" [(ngModel)]=\\\"val\\\"&gt;\\r\\n</code>\\r\\n</pre>\\r\\n <pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class ModelComponent &#123;\\r\\n\\r\\n    handleChange(e) &#123;\\r\\n        var isChecked = e.checked;\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Styling</h3>\\r\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Element</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>ui-togglebutton</td>\\r\\n                            <td>Container element</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-button-icon-left</td>\\r\\n                            <td>Icon element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-button-text</td>\\r\\n                            <td>Label element.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Dependencies</h3>\\r\\n            <p>None.</p>\\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"Source\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/togglebutton\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;h3 class=\\\"first\\\"&gt;Basic - ({{checked1}})&lt;/h3&gt;\\r\\n&lt;p-toggleButton [(ngModel)]=\\\"checked1\\\" [style]=\\\"&#123;'width':'150px'&#125;\\\"&gt;&lt;/p-toggleButton&gt;\\r\\n\\r\\n&lt;h3&gt;Customized - ({{checked2}})&lt;/h3&gt;\\r\\n&lt;p-toggleButton [(ngModel)]=\\\"checked2\\\" onLabel=\\\"I confirm\\\" offLabel=\\\"I reject\\\" onIcon=\\\"fa-check-square\\\" offIcon=\\\"fa-square\\\" [style]=\\\"&#123;'width':'150px'&#125;\\\"&gt;&lt;/p-toggleButton&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class ToggleButtonDemo &#123;\\r\\n\\r\\n    checked1: boolean = false;\\r\\n\\r\\n    checked2: boolean = true;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/showcase/components/togglebutton/togglebuttondemo.html\n// module id = ../../../../../src/app/showcase/components/togglebutton/togglebuttondemo.html\n// module chunks = togglebuttondemo.module","import {NgModule}     from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule}  from '@angular/forms';\r\nimport {ToggleButtonDemo} from './togglebuttondemo';\r\nimport {ToggleButtonDemoRoutingModule} from './togglebuttondemo-routing.module';\r\nimport {ToggleButtonModule} from '../../../components/togglebutton/togglebutton';\r\nimport {TabViewModule} from '../../../components/tabview/tabview';\r\nimport {CodeHighlighterModule} from '../../../components/codehighlighter/codehighlighter';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n        FormsModule,\r\n\t\tToggleButtonDemoRoutingModule,\r\n        ToggleButtonModule,\r\n        TabViewModule,\r\n        CodeHighlighterModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tToggleButtonDemo\r\n\t]\r\n})\r\nexport class ToggleButtonDemoModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/showcase/components/togglebutton/togglebuttondemo.module.ts","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    templateUrl: './togglebuttondemo.html'\r\n})\r\nexport class ToggleButtonDemo {\r\n    \r\n    checked1: boolean = false;\r\n\r\n    checked2: boolean = true;\r\n}\n\n\n// WEBPACK FOOTER //\n// E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/showcase/components/togglebutton/togglebuttondemo.ts"],"sourceRoot":"webpack:///"}