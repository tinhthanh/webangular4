{"version":3,"sources":["E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/components/terminal/terminal.ts","E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/components/terminal/terminalservice.ts","E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/showcase/components/terminal/terminaldemo-routing.module.ts","E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/showcase/components/terminal/terminaldemo.html","E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/showcase/components/terminal/terminaldemo.module.ts","E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/showcase/components/terminal/terminaldemo.ts"],"names":[],"mappings":"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","file":"terminaldemo.module.chunk.js","sourcesContent":["import {NgModule,Component,AfterViewInit,AfterViewChecked,OnDestroy,Input,Output,EventEmitter,ElementRef} from '@angular/core';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {CommonModule} from '@angular/common';\r\nimport {DomHandler} from '../dom/domhandler';\r\nimport {TerminalService} from './terminalservice';\r\nimport {Subscription}   from 'rxjs/Subscription';\r\n\r\n@Component({\r\n    selector: 'p-terminal',\r\n    template: `\r\n        <div [ngClass]=\"'ui-terminal ui-widget ui-widget-content ui-corner-all'\" [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"focus(in)\">\r\n            <div *ngIf=\"welcomeMessage\">{{welcomeMessage}}</div>\r\n            <div class=\"ui-terminal-content\">\r\n                <div *ngFor=\"let command of commands\">\r\n                    <span>{{prompt}}</span>\r\n                    <span class=\"ui-terminal-command\">{{command.text}}</span>\r\n                    <div>{{command.response}}</div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <span class=\"ui-terminal-content-prompt\">{{prompt}}</span>\r\n                <input #in type=\"text\" [(ngModel)]=\"command\" class=\"ui-terminal-input\" autocomplete=\"off\" (keydown)=\"handleCommand($event)\" autofocus>\r\n            </div>\r\n        </div>\r\n    `,\r\n    providers: [DomHandler]\r\n})\r\nexport class Terminal implements AfterViewInit,AfterViewChecked,OnDestroy {\r\n\r\n    @Input() welcomeMessage: string;\r\n\r\n    @Input() prompt: string;\r\n        \r\n    @Input() style: any;\r\n        \r\n    @Input() styleClass: string;\r\n            \r\n    commands: any[] = [];\r\n    \r\n    command: string;\r\n    \r\n    container: Element;\r\n    \r\n    commandProcessed: boolean;\r\n    \r\n    subscription: Subscription;\r\n    \r\n    constructor(public el: ElementRef, public domHandler: DomHandler, public terminalService: TerminalService) {\r\n        this.subscription = terminalService.responseHandler.subscribe(response => {\r\n            this.commands[this.commands.length - 1].response = response;\r\n            this.commandProcessed = true;\r\n        });\r\n    }\r\n    \r\n    ngAfterViewInit() {\r\n        this.container = this.domHandler.find(this.el.nativeElement, '.ui-terminal')[0];\r\n    }\r\n    \r\n    ngAfterViewChecked() {\r\n        if(this.commandProcessed) {\r\n            this.container.scrollTop = this.container.scrollHeight;\r\n            this.commandProcessed = false;\r\n        }\r\n    }\r\n                \r\n    @Input()\r\n    set response(value: string) {\r\n        if(value) {\r\n            this.commands[this.commands.length - 1].response = value;\r\n            this.commandProcessed = true;\r\n        }\r\n    }\r\n    \r\n    handleCommand(event: KeyboardEvent) {\r\n        if(event.keyCode == 13) {\r\n            this.commands.push({text: this.command});\r\n            this.terminalService.sendCommand(this.command);\r\n            this.command = '';\r\n        }\r\n    }\r\n    \r\n    focus(element: HTMLElement) {\r\n        element.focus();\r\n    }\r\n    \r\n    ngOnDestroy() {\r\n        if(this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,FormsModule],\r\n    exports: [Terminal],\r\n    declarations: [Terminal]\r\n})\r\nexport class TerminalModule { }\n\n\n// WEBPACK FOOTER //\n// E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/components/terminal/terminal.ts","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n@Injectable()\r\nexport class TerminalService {\r\n    \r\n    private commandSource = new Subject<string>();\r\n    private responseSource = new Subject<string>();\r\n    \r\n    commandHandler = this.commandSource.asObservable();\r\n    responseHandler = this.responseSource.asObservable();\r\n    \r\n    sendCommand(command: string) {\r\n        if(command) {\r\n            this.commandSource.next(command);\r\n        }\r\n    }\r\n    \r\n    sendResponse(response: string) {\r\n        if(response) {\r\n            this.responseSource.next(response);\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/components/terminal/terminalservice.ts","import {NgModule}     from '@angular/core';\r\nimport {RouterModule} from '@angular/router'\r\nimport {TerminalDemo} from './terminaldemo';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tRouterModule.forChild([\r\n\t\t\t{path:'',component: TerminalDemo}\r\n\t\t])\r\n\t],\r\n\texports: [\r\n\t\tRouterModule\r\n\t]\r\n})\r\nexport class TerminalDemoRoutingModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/showcase/components/terminal/terminaldemo-routing.module.ts","module.exports = \"<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Terminal</span>\\r\\n        <span>Terminal is a text based user interface. Enter \\\"date\\\" to display the current date.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <p-terminal welcomeMessage=\\\"Welcome to PrimeNG\\\" prompt=\\\"primeng $\\\"></p-terminal>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"Documentation\\\">\\r\\n            <h3>Import</h3>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nimport &#123;TerminalModule&#125; from 'primeng/primeng';\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Getting Started</h3>\\r\\n            <p>Commands are processed using observables via the TerminalService. Import this service into your component and subscribe\\r\\n            to commandHandler to process commands by sending replies with sendResponse function.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nimport &#123;Component&#125; from '@angular/core';\\r\\nimport &#123;TerminalService&#125; from 'primeng/components/terminal/terminalservice';\\r\\n\\r\\n@Component(&#123;\\r\\n    template: '&lt;p-terminal welcomeMessage=\\\"Welcome to PrimeNG\\\" prompt=\\\"primeng $\\\"&gt;&lt;/p-terminal&gt;',\\r\\n    providers: [TerminalService]\\r\\n&#125;)\\r\\nexport class TerminalDemo &#123;\\r\\n    \\r\\n    constructor(private terminalService: TerminalService) &#123;\\r\\n        this.terminalService.commandHandler.subscribe(command => &#123;\\r\\n            let response = (command === 'date') ? new Date().toDateString() : 'Unknown command: ' + command;\\r\\n            this.terminalService.sendResponse(response);\\r\\n        &#125;);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Properties</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Type</th>\\r\\n                            <th>Default</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>welcomeMessage</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Initial text to display on terminal.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>prompt</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Prompt text for each command.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>style</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Inline style of the component.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>styleClass</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Style class of the component.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n            \\r\\n            <h3>Styling</h3>\\r\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Element</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>ui-terminal</td>\\r\\n                            <td>Container element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-terminal-content</td>\\r\\n                            <td>Content of terminal.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-terminal-content-prompt</td>\\r\\n                            <td>Prompt text.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-terminal-input</td>\\r\\n                            <td>Input element to enter commands.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Dependencies</h3>\\r\\n            <p>None.</p>\\r\\n        </p-tabPanel>\\r\\n\\r\\n<p-tabPanel header=\\\"Source\\\">\\r\\n    <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/terminal\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n        <i class=\\\"fa fa-github\\\"></i>\\r\\n        <span>View on GitHub</span>\\r\\n    </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-terminal welcomeMessage=\\\"Welcome to PrimeNG\\\" prompt=\\\"primeng $\\\"&gt;&lt;/p-terminal&gt;\\r\\n</code>\\r\\n</pre>\\r\\n    \\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nimport &#123;Component&#125; from '@angular/core';\\r\\nimport &#123;TerminalService&#125; from 'primeng/components/terminal/terminalservice';\\r\\nimport &#123;Subscription&#125; from 'rxjs/Subscription';\\r\\n\\r\\n@Component(&#123;\\r\\n    templateUrl: './terminaldemo.html',\\r\\n    providers: [TerminalService]\\r\\n&#125;)\\r\\nexport class TerminalDemo &#123;\\r\\n\\r\\n    subscription: Subscription;\\r\\n    \\r\\n    constructor(private terminalService: TerminalService) &#123;\\r\\n        this.terminalService.commandHandler.subscribe(command => &#123;\\r\\n            let response = (command === 'date') ? new Date().toDateString() : 'Unknown command: ' + command;\\r\\n            this.terminalService.sendResponse(response);\\r\\n        &#125;);\\r\\n    &#125;\\r\\n    \\r\\n    ngOnDestroy() &#123;\\r\\n        if(this.subscription) &#123;\\r\\n            this.subscription.unsubscribe();\\r\\n        &#125;\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n</p-tabPanel>\\r\\n\\r\\n\\r\\n    </p-tabView>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/showcase/components/terminal/terminaldemo.html\n// module id = ../../../../../src/app/showcase/components/terminal/terminaldemo.html\n// module chunks = terminaldemo.module","import {NgModule}     from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {TerminalDemo} from './terminaldemo';\r\nimport {TerminalDemoRoutingModule} from './terminaldemo-routing.module';\r\nimport {TerminalModule} from '../../../components/terminal/terminal';\r\nimport {TabViewModule} from '../../../components/tabview/tabview';\r\nimport {CodeHighlighterModule} from '../../../components/codehighlighter/codehighlighter';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tTerminalDemoRoutingModule,\r\n        TerminalModule,\r\n        TabViewModule,\r\n        CodeHighlighterModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tTerminalDemo\r\n\t]\r\n})\r\nexport class TerminalDemoModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/showcase/components/terminal/terminaldemo.module.ts","import {Component,OnDestroy} from '@angular/core';\r\nimport {TerminalService} from '../../../components/terminal/terminalservice';\r\nimport {Subscription}   from 'rxjs/Subscription';\r\n\r\n@Component({\r\n    templateUrl: './terminaldemo.html',\r\n    providers: [TerminalService]\r\n})\r\nexport class TerminalDemo implements OnDestroy {\r\n    \r\n    subscription: Subscription;\r\n    \r\n    constructor(private terminalService: TerminalService) {\r\n        this.subscription = this.terminalService.commandHandler.subscribe(command => {\r\n            let response = (command === 'date') ? new Date().toDateString() : 'Unknown command: ' + command;\r\n            this.terminalService.sendResponse(response);\r\n        });\r\n    }\r\n    \r\n    ngOnDestroy() {\r\n        if(this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// E:/TypeScript/tmdt/RMDTADMIN/SellAdmin/src/app/showcase/components/terminal/terminaldemo.ts"],"sourceRoot":"webpack:///"}